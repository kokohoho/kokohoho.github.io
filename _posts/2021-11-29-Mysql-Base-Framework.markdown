---
layout:     post
title:      "「原创」MySQL高级面试题01 ：基础与架构"
subtitle:   "React versus Angular 2: There Will Be Blood"
date:       2021-11-29 12:00:00
author:     "NI"
header-img: "img/post-bg-re-vs-ng2.jpg"
header-mask: 0.3
catalog:    true
tags:
  - MySQL
  - 原创
---


## 1.MySQL主要由哪些组件组成

### 客户端 JDBC

和服务器建立连接并将SQL发给服务器

### 连接器 Connector

接收客户端请求并建立连接，通过池方式管理
对连接管理，可以设置最大连接数、连接超时时间
对用户权限验证，判断用户是否合法，并一次性从表中查询出用户权限放在该连接缓存中

### 查询缓存 QueryCache

假如SQL匹配到查询缓存存在则返回查询缓存中数据
表一旦数据发生改变该表所有查询缓存就会失效，所以不建议在数据频繁更改下使用查询缓存

### 解析器（词法、语法） Analyzer

解析SQL语法生成AST语法树并优化AST树

### 优化器	Optimizer

#### 根据AST树生成最优执行计划,优化一般是选择索引和关联表的顺表,以及一些琐碎的优化：

> 1.使用等值变化规则：a>5 and a>6 --> a>6

> 2.优化COUNT()&MIN()&MAX()：根据索引有序特点，直接常数级别获取最大、小值，不需要扫描表

> 3.覆盖索引扫描：使用覆盖索引，避免回表扫描

> 4.提前终止查询：若发现条件不对，则终止查询,优化器可结合EXPLAIN指令来理解，EXPLAIN里的一些优化项目即是优化器的一些优化项目

> 5.索引合并：将两个单独列索引where结果合并在一起，type中会显示index_merge

``（MySQL5.0之前，一个表一次只能使用一个索引，无法同时使用多个索引分别进行条件扫描。但是从5.1开始，引入了 index merge 优化技术，对同一个表可以使用	
多个索引分别进行条件扫描。）
``

``
AND：做并集，一般说明我们索引设计不合理，设计联合索引会比较好
``

``
OR: 分别从两个索引中按条件查询数据，然后将结果union到一起
``

``
AND和OR：两个的复合操作
``

> 6.MRR：将在二级索引中随机获取到的主键提前排序，并一起在主键索引中顺序查询。EXTRA中Using mrr

> 7.ICP：索引下推，EXTRA中Using index condition即代表使用了索引下推

> 8.index：使用index扫描取代ALL，类似于索引覆盖

#### 选择哪个索引以及全表扫描的规则，在MySQL中是CBO基于成本的：

> 成本：

``
CPU成本： row	扫描行数 InnoDb是预估值
``

``
IO成本:回表
``

基数Cardinality：

> 成本计算：


##### 1.全表扫描成本

IO成本：主键索引占用的页面数 * 1

CPU成本：该表中的记录数 * 0.2

总成本= 主键索引占用的页面数 * 1 + 该表中的记录数 * 0.2


##### 2.索引成本

>2.1 找出所有能用到的索引

通过where条件找出可能用到的索引，即Explain中的possiable keys

>2.2 针对每个索引计算不同访问方式的成本

2.2.1 主键索引

范围区间数：不管是何种范围区间访问=、in、>、<，都粗暴认为是读取一个页的IO成本

所以范围区间的索引成本是1.0

预估范围内的记录数：

找到最左和最右记录，并通过父节点页面，可以知道两个记录之间隔着多少数据页

若最左和最右之间数据页不超过10个，则精确统计每个页面包含多少记录

若超过10个，则 平均页面记录数*左右记录之间的页面数

主键总成本：确定访问的IO成本+过滤数据的CPU成本

2.2.2 辅助索引

辅助索引查询语句实际相当于：select * from table where id in (id1,id2,id3,...,idn);

辅助索引的总成本：辅助索引的查询成本+回表查询的成本

2.2.3 index dive

index dive

index statistics

2.2.4 NULL值

2.2.5 统计数据

3.选出成本最小的索引和访问方式

4.控制执行计划

USE INDEX

IGNORE INDEX

FORCE IDNEX

### 执行器	Executor

根据执行计划调用存储引擎接口

### 存储引擎 StoreageEngine

通过接口方式查询、存储、管理数据
